{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2022-11-25-dotnet-docker.md","hash":"6227b38e95077d35760749949eff048a833831f5","modified":1669397994380},{"_id":"source/categories/index.md","hash":"8f649ae881c609fe0f0709f4393f7b49d32d4b71","modified":1669383110713},{"_id":"source/about/index.md","hash":"f4c9894881327addaa5734e2124463384eca845b","modified":1669377359065},{"_id":"source/_posts/2022-11-25-migrations.md","hash":"00a20ee132d6cdf4a33978613e247ce6c53cc599","modified":1669397869454},{"_id":"source/tags/index.md","hash":"d18944d6e1ddf82f32ed83f2623bd87e8ecdcaca","modified":1669383003880},{"_id":"source/_posts/2022-11-26-dotnet-auto-inject.md","hash":"640c777d2a653097cef837d17ce36225219ce51d","modified":1669397819281},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"f70036961ba47d8a5f7d3581b7c077a4e41d0767","modified":1669376995160},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":499162500000}],"Category":[],"Data":[],"Page":[{"title":"分类","date":"2022-11-25T13:31:30.000Z","types":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-11-25 21:31:30\ntypes: categories\n---\n","updated":"2022-11-25T13:31:50.713Z","path":"categories/index.html","comments":1,"layout":"page","_id":"claxekitc00001z67a9rv07wn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-11-25T13:18:50.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-11-25 21:18:50\ntype: tags\n---\n","updated":"2022-11-25T13:30:03.880Z","path":"tags/index.html","comments":1,"layout":"page","_id":"claxekiti00021z6752lv0gcw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2022-11-25T11:52:43.000Z","_content":"\n#### 关于我们","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-11-25 19:52:43\n---\n\n#### 关于我们","updated":"2022-11-25T11:55:59.065Z","path":"about/index.html","comments":1,"layout":"page","_id":"claxekitm00051z673y76cgca","content":"<h4 id=\"关于我们\"><a href=\"#关于我们\" class=\"headerlink\" title=\"关于我们\"></a>关于我们</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于我们\"><a href=\"#关于我们\" class=\"headerlink\" title=\"关于我们\"></a>关于我们</h4>"}],"Post":[{"title":"dotnet core entityframework 迁移工具","header_image":"https://picgo.ddvlhr.red/picgo/202211260135118.jpeg","cover":"https://picgo.ddvlhr.red/picgo/202211260135118.jpeg","_content":"#### 1.安装迁移工具\n``` shell\n$ dotnet tool install --global dotnet-ef\n```\n\n#### 2.引入迁移工具\n``` shell\n$ dotnet add package Microsoft.EntityFrameworkCore.Design\n```\n\n#### 3.初始化迁移工具\n> ##### migration-project-absolute-url 如果不想把 migrations 文件夹存放在运行项目中时,   \n> ##### 请指定存放 migraitons 文件夹项目的绝对路径  \n``` shell\n$ dotnet ef migrations add migration-name --project migration-project-absolute-url \n```\n\n#### 4.更新数据库\n``` shell\n$ dotnet ef database update \n```","source":"_posts/2022-11-25-migrations.md","raw":"---\ntitle: dotnet core entityframework 迁移工具\nheader_image: https://picgo.ddvlhr.red/picgo/202211260135118.jpeg\ncover: https://picgo.ddvlhr.red/picgo/202211260135118.jpeg\ntags: \n  - dotnet\n  - entityframework\n  - backend\n---\n#### 1.安装迁移工具\n``` shell\n$ dotnet tool install --global dotnet-ef\n```\n\n#### 2.引入迁移工具\n``` shell\n$ dotnet add package Microsoft.EntityFrameworkCore.Design\n```\n\n#### 3.初始化迁移工具\n> ##### migration-project-absolute-url 如果不想把 migrations 文件夹存放在运行项目中时,   \n> ##### 请指定存放 migraitons 文件夹项目的绝对路径  \n``` shell\n$ dotnet ef migrations add migration-name --project migration-project-absolute-url \n```\n\n#### 4.更新数据库\n``` shell\n$ dotnet ef database update \n```","slug":"2022-11-25-migrations","published":1,"date":"2022-11-25T12:43:15.558Z","updated":"2022-11-25T17:37:49.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxekite00011z670doqaoua","content":"<h4 id=\"1-安装迁移工具\"><a href=\"#1-安装迁移工具\" class=\"headerlink\" title=\"1.安装迁移工具\"></a>1.安装迁移工具</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ dotnet tool install --global dotnet-ef</code></pre>\n\n<h4 id=\"2-引入迁移工具\"><a href=\"#2-引入迁移工具\" class=\"headerlink\" title=\"2.引入迁移工具\"></a>2.引入迁移工具</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ dotnet add package Microsoft.EntityFrameworkCore.Design</code></pre>\n\n<h4 id=\"3-初始化迁移工具\"><a href=\"#3-初始化迁移工具\" class=\"headerlink\" title=\"3.初始化迁移工具\"></a>3.初始化迁移工具</h4><blockquote>\n<h5 id=\"migration-project-absolute-url-如果不想把-migrations-文件夹存放在运行项目中时\"><a href=\"#migration-project-absolute-url-如果不想把-migrations-文件夹存放在运行项目中时\" class=\"headerlink\" title=\"migration-project-absolute-url 如果不想把 migrations 文件夹存放在运行项目中时,\"></a>migration-project-absolute-url 如果不想把 migrations 文件夹存放在运行项目中时,</h5><h5 id=\"请指定存放-migraitons-文件夹项目的绝对路径\"><a href=\"#请指定存放-migraitons-文件夹项目的绝对路径\" class=\"headerlink\" title=\"请指定存放 migraitons 文件夹项目的绝对路径\"></a>请指定存放 migraitons 文件夹项目的绝对路径</h5></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ dotnet ef migrations add migration-name --project migration-project-absolute-url </code></pre>\n\n<h4 id=\"4-更新数据库\"><a href=\"#4-更新数据库\" class=\"headerlink\" title=\"4.更新数据库\"></a>4.更新数据库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ dotnet ef database update </code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-安装迁移工具\"><a href=\"#1-安装迁移工具\" class=\"headerlink\" title=\"1.安装迁移工具\"></a>1.安装迁移工具</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ dotnet tool install --global dotnet-ef</code></pre>\n\n<h4 id=\"2-引入迁移工具\"><a href=\"#2-引入迁移工具\" class=\"headerlink\" title=\"2.引入迁移工具\"></a>2.引入迁移工具</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ dotnet add package Microsoft.EntityFrameworkCore.Design</code></pre>\n\n<h4 id=\"3-初始化迁移工具\"><a href=\"#3-初始化迁移工具\" class=\"headerlink\" title=\"3.初始化迁移工具\"></a>3.初始化迁移工具</h4><blockquote>\n<h5 id=\"migration-project-absolute-url-如果不想把-migrations-文件夹存放在运行项目中时\"><a href=\"#migration-project-absolute-url-如果不想把-migrations-文件夹存放在运行项目中时\" class=\"headerlink\" title=\"migration-project-absolute-url 如果不想把 migrations 文件夹存放在运行项目中时,\"></a>migration-project-absolute-url 如果不想把 migrations 文件夹存放在运行项目中时,</h5><h5 id=\"请指定存放-migraitons-文件夹项目的绝对路径\"><a href=\"#请指定存放-migraitons-文件夹项目的绝对路径\" class=\"headerlink\" title=\"请指定存放 migraitons 文件夹项目的绝对路径\"></a>请指定存放 migraitons 文件夹项目的绝对路径</h5></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ dotnet ef migrations add migration-name --project migration-project-absolute-url </code></pre>\n\n<h4 id=\"4-更新数据库\"><a href=\"#4-更新数据库\" class=\"headerlink\" title=\"4.更新数据库\"></a>4.更新数据库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ dotnet ef database update </code></pre>"},{"title":"Auto Injecting Dependencies Attribute in .NET","abstract":"Auto Injecting Dependencies Attribute in .NET","header_image":"https://picgo.ddvlhr.red/picgo/202211260135090.jpeg","cover":"https://picgo.ddvlhr.red/picgo/202211260135090.jpeg","date":"2022-11-25T16:00:00.000Z","_content":"> #### 该 Attribute 为自定义自动依赖注入工具, 只需要在 class 中使用该 Attribute 即可以自动注入, 不必在 Program.cs 或者 Startup.cs 中手动注入. \n## 1.创建 InjectType 枚举类, 该枚举类定义三种生命周期, 分别为 Singleton, Scoped, Transient\n``` csharp\n/// <summary>\n/// 注入类型\n/// </summary>\npublic enum InjectType\n{\n    Scope,\n    Single,\n    Transient\n}\n```\n## 2.创建 AutoInjectAttribute.cs 文件.\n``` csharp\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\npublic class AutoInjectAttribute: Attribute\n{\n    public AutoInjectAttribute(Type interfaceType, InjectType injectType)\n    {\n        Type = interfaceType;\n        InjectType = injectType;\n    }\n\n    public Type Type { get; set; }\n    public InjectType InjectType { get; set; }\n}\n```\n## 3.创建 AutoInjectExtension.cs 文件, 该文件为自动注入扩展方法类.\n``` csharp\npublic static class AutoInjectExtension {\n    /// <summary>\n    /// 自动注入所有的程序集有InjectAttribute标签\n    /// </summary>\n    /// <param name=\"serviceCollection\"></param>\n    /// <returns></returns>\n    public static IServiceCollection AddAutoDi(this IServiceCollection serviceCollection)\n    {\n        var path = AppDomain.CurrentDomain.BaseDirectory;\n        var assemblies = Directory.GetFiles(path, \"*.dll\").Select(Assembly.LoadFrom).ToList();\n        foreach (var assembly in assemblies)\n        {\n            var types = assembly.GetTypes().Where(a => a.GetCustomAttribute<AutoInjectAttribute>() != null)\n                .ToList();\n            if (types.Count <= 0) continue;\n            foreach (var type in types)\n            {\n                var attr = type.GetCustomAttribute<AutoInjectAttribute>();\n                if (attr?.Type == null) continue;\n                switch (attr.InjectType)\n                {\n                    case InjectType.Scope:\n                        serviceCollection.AddScoped(attr.Type, type);\n                        break;\n                    case InjectType.Single:\n                        serviceCollection.AddSingleton(attr.Type, type);\n                        break;\n                    case InjectType.Transient:\n                        serviceCollection.AddTransient(attr.Type, type);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                }\n            }\n        }\n        return serviceCollection;\n    }\n}\n```\n## 4.在 Program.cs 或者 Startup.cs 中使用该扩展方法.\n``` csharp\nservices.AddAutoDi();\n```\n## 5.在需要注入的类中使用该 Attribute.\n``` csharp\n[AutoInject(typeof(IUserService), InjectType.Scope)]\npublic class UserService: IUserService {}\n```","source":"_posts/2022-11-26-dotnet-auto-inject.md","raw":"---\ntitle: \"Auto Injecting Dependencies Attribute in .NET\"\nabstract: Auto Injecting Dependencies Attribute in .NET\nheader_image: https://picgo.ddvlhr.red/picgo/202211260135090.jpeg\ncover: https://picgo.ddvlhr.red/picgo/202211260135090.jpeg\ndate: 2022/11/26\ntags:\n  - dotnet\n  - dependency-injection\n  - C#\n---\n> #### 该 Attribute 为自定义自动依赖注入工具, 只需要在 class 中使用该 Attribute 即可以自动注入, 不必在 Program.cs 或者 Startup.cs 中手动注入. \n## 1.创建 InjectType 枚举类, 该枚举类定义三种生命周期, 分别为 Singleton, Scoped, Transient\n``` csharp\n/// <summary>\n/// 注入类型\n/// </summary>\npublic enum InjectType\n{\n    Scope,\n    Single,\n    Transient\n}\n```\n## 2.创建 AutoInjectAttribute.cs 文件.\n``` csharp\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\npublic class AutoInjectAttribute: Attribute\n{\n    public AutoInjectAttribute(Type interfaceType, InjectType injectType)\n    {\n        Type = interfaceType;\n        InjectType = injectType;\n    }\n\n    public Type Type { get; set; }\n    public InjectType InjectType { get; set; }\n}\n```\n## 3.创建 AutoInjectExtension.cs 文件, 该文件为自动注入扩展方法类.\n``` csharp\npublic static class AutoInjectExtension {\n    /// <summary>\n    /// 自动注入所有的程序集有InjectAttribute标签\n    /// </summary>\n    /// <param name=\"serviceCollection\"></param>\n    /// <returns></returns>\n    public static IServiceCollection AddAutoDi(this IServiceCollection serviceCollection)\n    {\n        var path = AppDomain.CurrentDomain.BaseDirectory;\n        var assemblies = Directory.GetFiles(path, \"*.dll\").Select(Assembly.LoadFrom).ToList();\n        foreach (var assembly in assemblies)\n        {\n            var types = assembly.GetTypes().Where(a => a.GetCustomAttribute<AutoInjectAttribute>() != null)\n                .ToList();\n            if (types.Count <= 0) continue;\n            foreach (var type in types)\n            {\n                var attr = type.GetCustomAttribute<AutoInjectAttribute>();\n                if (attr?.Type == null) continue;\n                switch (attr.InjectType)\n                {\n                    case InjectType.Scope:\n                        serviceCollection.AddScoped(attr.Type, type);\n                        break;\n                    case InjectType.Single:\n                        serviceCollection.AddSingleton(attr.Type, type);\n                        break;\n                    case InjectType.Transient:\n                        serviceCollection.AddTransient(attr.Type, type);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                }\n            }\n        }\n        return serviceCollection;\n    }\n}\n```\n## 4.在 Program.cs 或者 Startup.cs 中使用该扩展方法.\n``` csharp\nservices.AddAutoDi();\n```\n## 5.在需要注入的类中使用该 Attribute.\n``` csharp\n[AutoInject(typeof(IUserService), InjectType.Scope)]\npublic class UserService: IUserService {}\n```","slug":"2022-11-26-dotnet-auto-inject","published":1,"updated":"2022-11-25T17:36:59.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxekiti00031z6778nl8f57","content":"<blockquote>\n<h4 id=\"该-Attribute-为自定义自动依赖注入工具-只需要在-class-中使用该-Attribute-即可以自动注入-不必在-Program-cs-或者-Startup-cs-中手动注入\"><a href=\"#该-Attribute-为自定义自动依赖注入工具-只需要在-class-中使用该-Attribute-即可以自动注入-不必在-Program-cs-或者-Startup-cs-中手动注入\" class=\"headerlink\" title=\"该 Attribute 为自定义自动依赖注入工具, 只需要在 class 中使用该 Attribute 即可以自动注入, 不必在 Program.cs 或者 Startup.cs 中手动注入.\"></a>该 Attribute 为自定义自动依赖注入工具, 只需要在 class 中使用该 Attribute 即可以自动注入, 不必在 Program.cs 或者 Startup.cs 中手动注入.</h4></blockquote>\n<h2 id=\"1-创建-InjectType-枚举类-该枚举类定义三种生命周期-分别为-Singleton-Scoped-Transient\"><a href=\"#1-创建-InjectType-枚举类-该枚举类定义三种生命周期-分别为-Singleton-Scoped-Transient\" class=\"headerlink\" title=\"1.创建 InjectType 枚举类, 该枚举类定义三种生命周期, 分别为 Singleton, Scoped, Transient\"></a>1.创建 InjectType 枚举类, 该枚举类定义三种生命周期, 分别为 Singleton, Scoped, Transient</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">&#x2F;&#x2F;&#x2F; &lt;summary&gt;\n&#x2F;&#x2F;&#x2F; 注入类型\n&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;\npublic enum InjectType\n&#123;\n    Scope,\n    Single,\n    Transient\n&#125;</code></pre>\n<h2 id=\"2-创建-AutoInjectAttribute-cs-文件\"><a href=\"#2-创建-AutoInjectAttribute-cs-文件\" class=\"headerlink\" title=\"2.创建 AutoInjectAttribute.cs 文件.\"></a>2.创建 AutoInjectAttribute.cs 文件.</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">[AttributeUsage(AttributeTargets.Class, AllowMultiple &#x3D; false)]\npublic class AutoInjectAttribute: Attribute\n&#123;\n    public AutoInjectAttribute(Type interfaceType, InjectType injectType)\n    &#123;\n        Type &#x3D; interfaceType;\n        InjectType &#x3D; injectType;\n    &#125;\n\n    public Type Type &#123; get; set; &#125;\n    public InjectType InjectType &#123; get; set; &#125;\n&#125;</code></pre>\n<h2 id=\"3-创建-AutoInjectExtension-cs-文件-该文件为自动注入扩展方法类\"><a href=\"#3-创建-AutoInjectExtension-cs-文件-该文件为自动注入扩展方法类\" class=\"headerlink\" title=\"3.创建 AutoInjectExtension.cs 文件, 该文件为自动注入扩展方法类.\"></a>3.创建 AutoInjectExtension.cs 文件, 该文件为自动注入扩展方法类.</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">public static class AutoInjectExtension &#123;\n    &#x2F;&#x2F;&#x2F; &lt;summary&gt;\n    &#x2F;&#x2F;&#x2F; 自动注入所有的程序集有InjectAttribute标签\n    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;\n    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;serviceCollection&quot;&gt;&lt;&#x2F;param&gt;\n    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;\n    public static IServiceCollection AddAutoDi(this IServiceCollection serviceCollection)\n    &#123;\n        var path &#x3D; AppDomain.CurrentDomain.BaseDirectory;\n        var assemblies &#x3D; Directory.GetFiles(path, &quot;*.dll&quot;).Select(Assembly.LoadFrom).ToList();\n        foreach (var assembly in assemblies)\n        &#123;\n            var types &#x3D; assembly.GetTypes().Where(a &#x3D;&gt; a.GetCustomAttribute&lt;AutoInjectAttribute&gt;() !&#x3D; null)\n                .ToList();\n            if (types.Count &lt;&#x3D; 0) continue;\n            foreach (var type in types)\n            &#123;\n                var attr &#x3D; type.GetCustomAttribute&lt;AutoInjectAttribute&gt;();\n                if (attr?.Type &#x3D;&#x3D; null) continue;\n                switch (attr.InjectType)\n                &#123;\n                    case InjectType.Scope:\n                        serviceCollection.AddScoped(attr.Type, type);\n                        break;\n                    case InjectType.Single:\n                        serviceCollection.AddSingleton(attr.Type, type);\n                        break;\n                    case InjectType.Transient:\n                        serviceCollection.AddTransient(attr.Type, type);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                &#125;\n            &#125;\n        &#125;\n        return serviceCollection;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"4-在-Program-cs-或者-Startup-cs-中使用该扩展方法\"><a href=\"#4-在-Program-cs-或者-Startup-cs-中使用该扩展方法\" class=\"headerlink\" title=\"4.在 Program.cs 或者 Startup.cs 中使用该扩展方法.\"></a>4.在 Program.cs 或者 Startup.cs 中使用该扩展方法.</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">services.AddAutoDi();</code></pre>\n<h2 id=\"5-在需要注入的类中使用该-Attribute\"><a href=\"#5-在需要注入的类中使用该-Attribute\" class=\"headerlink\" title=\"5.在需要注入的类中使用该 Attribute.\"></a>5.在需要注入的类中使用该 Attribute.</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">[AutoInject(typeof(IUserService), InjectType.Scope)]\npublic class UserService: IUserService &#123;&#125;</code></pre>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h4 id=\"该-Attribute-为自定义自动依赖注入工具-只需要在-class-中使用该-Attribute-即可以自动注入-不必在-Program-cs-或者-Startup-cs-中手动注入\"><a href=\"#该-Attribute-为自定义自动依赖注入工具-只需要在-class-中使用该-Attribute-即可以自动注入-不必在-Program-cs-或者-Startup-cs-中手动注入\" class=\"headerlink\" title=\"该 Attribute 为自定义自动依赖注入工具, 只需要在 class 中使用该 Attribute 即可以自动注入, 不必在 Program.cs 或者 Startup.cs 中手动注入.\"></a>该 Attribute 为自定义自动依赖注入工具, 只需要在 class 中使用该 Attribute 即可以自动注入, 不必在 Program.cs 或者 Startup.cs 中手动注入.</h4></blockquote>\n<h2 id=\"1-创建-InjectType-枚举类-该枚举类定义三种生命周期-分别为-Singleton-Scoped-Transient\"><a href=\"#1-创建-InjectType-枚举类-该枚举类定义三种生命周期-分别为-Singleton-Scoped-Transient\" class=\"headerlink\" title=\"1.创建 InjectType 枚举类, 该枚举类定义三种生命周期, 分别为 Singleton, Scoped, Transient\"></a>1.创建 InjectType 枚举类, 该枚举类定义三种生命周期, 分别为 Singleton, Scoped, Transient</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">&#x2F;&#x2F;&#x2F; &lt;summary&gt;\n&#x2F;&#x2F;&#x2F; 注入类型\n&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;\npublic enum InjectType\n&#123;\n    Scope,\n    Single,\n    Transient\n&#125;</code></pre>\n<h2 id=\"2-创建-AutoInjectAttribute-cs-文件\"><a href=\"#2-创建-AutoInjectAttribute-cs-文件\" class=\"headerlink\" title=\"2.创建 AutoInjectAttribute.cs 文件.\"></a>2.创建 AutoInjectAttribute.cs 文件.</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">[AttributeUsage(AttributeTargets.Class, AllowMultiple &#x3D; false)]\npublic class AutoInjectAttribute: Attribute\n&#123;\n    public AutoInjectAttribute(Type interfaceType, InjectType injectType)\n    &#123;\n        Type &#x3D; interfaceType;\n        InjectType &#x3D; injectType;\n    &#125;\n\n    public Type Type &#123; get; set; &#125;\n    public InjectType InjectType &#123; get; set; &#125;\n&#125;</code></pre>\n<h2 id=\"3-创建-AutoInjectExtension-cs-文件-该文件为自动注入扩展方法类\"><a href=\"#3-创建-AutoInjectExtension-cs-文件-该文件为自动注入扩展方法类\" class=\"headerlink\" title=\"3.创建 AutoInjectExtension.cs 文件, 该文件为自动注入扩展方法类.\"></a>3.创建 AutoInjectExtension.cs 文件, 该文件为自动注入扩展方法类.</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">public static class AutoInjectExtension &#123;\n    &#x2F;&#x2F;&#x2F; &lt;summary&gt;\n    &#x2F;&#x2F;&#x2F; 自动注入所有的程序集有InjectAttribute标签\n    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;\n    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;serviceCollection&quot;&gt;&lt;&#x2F;param&gt;\n    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;\n    public static IServiceCollection AddAutoDi(this IServiceCollection serviceCollection)\n    &#123;\n        var path &#x3D; AppDomain.CurrentDomain.BaseDirectory;\n        var assemblies &#x3D; Directory.GetFiles(path, &quot;*.dll&quot;).Select(Assembly.LoadFrom).ToList();\n        foreach (var assembly in assemblies)\n        &#123;\n            var types &#x3D; assembly.GetTypes().Where(a &#x3D;&gt; a.GetCustomAttribute&lt;AutoInjectAttribute&gt;() !&#x3D; null)\n                .ToList();\n            if (types.Count &lt;&#x3D; 0) continue;\n            foreach (var type in types)\n            &#123;\n                var attr &#x3D; type.GetCustomAttribute&lt;AutoInjectAttribute&gt;();\n                if (attr?.Type &#x3D;&#x3D; null) continue;\n                switch (attr.InjectType)\n                &#123;\n                    case InjectType.Scope:\n                        serviceCollection.AddScoped(attr.Type, type);\n                        break;\n                    case InjectType.Single:\n                        serviceCollection.AddSingleton(attr.Type, type);\n                        break;\n                    case InjectType.Transient:\n                        serviceCollection.AddTransient(attr.Type, type);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                &#125;\n            &#125;\n        &#125;\n        return serviceCollection;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"4-在-Program-cs-或者-Startup-cs-中使用该扩展方法\"><a href=\"#4-在-Program-cs-或者-Startup-cs-中使用该扩展方法\" class=\"headerlink\" title=\"4.在 Program.cs 或者 Startup.cs 中使用该扩展方法.\"></a>4.在 Program.cs 或者 Startup.cs 中使用该扩展方法.</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">services.AddAutoDi();</code></pre>\n<h2 id=\"5-在需要注入的类中使用该-Attribute\"><a href=\"#5-在需要注入的类中使用该-Attribute\" class=\"headerlink\" title=\"5.在需要注入的类中使用该 Attribute.\"></a>5.在需要注入的类中使用该 Attribute.</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">[AutoInject(typeof(IUserService), InjectType.Scope)]\npublic class UserService: IUserService &#123;&#125;</code></pre>"},{"title":"dotnet Dockerfile 部署","header_image":"https://picgo.ddvlhr.red/picgo/202211260135930.jpeg","cover":"https://picgo.ddvlhr.red/picgo/202211260135930.jpeg","_content":"## 1.创建 Dockerfile 文件\n``` dockerfile\nFROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base\nCOPY . /publish\nWORKDIR /publish\nEXPOSE 80\n\n# 指定容器运行端口\n# EXPOSE 指定的端口无效, docker 还是会默认使用 80 端口,如果要使用其他端口,请使用如下指令\nENV ASPNETCORE_URLS=http://+:5001\n\n# dotnet-project.dll 为项目编译后的 dll 文件\nENTRYPOINT [\"dotnet\", \"dotnet-project.dll\"]\n```\n## 2.创建 start.sh 文件\n``` shell\n# 容器名称\nAPP=\"api\"\nVERSION=\"v1\"\nIMAGE=$APP:$VERSION\nDOCKER_NAME=\"$APP_$VERSION\"\n# Dockerfile 文件路径\nAPP_DIR=\"/home/apps/csharp/api/publish/Dockerfile\"\n# 项目编译后的 dll 文件路径\nPUBLISH_DIR=\"/home/apps/csharp/api/publish\"\necho \"--- delete container and image ---\"\n# 停止并删除容器和镜像\ndocker stop $DOCKER_NAME\ndocker rm $DOCKER_NAME\ndocker rmi $IMAGE\necho \"+++ build docker images\"\n# 重新构建镜像\ndocker build -t $IMAGE .\necho \"--- run docker images ---\"\n# 启动容器\nCONTAINER_ID=`docker run -dit -p 7229:7229 --name=$DOCKER_NAME --restart=always -v $PUBLISH_DIR:/publish $IMAGE`\n#docker logs -f $CONTAINER_ID\n```\n## 3.部署项目\n> #### 将发布后的文件夹上传到服务器后, 在项目文件夹下执行如下指令即可将项目部署到 docker 中\n``` shell\n$ sh start.sh\n```","source":"_posts/2022-11-25-dotnet-docker.md","raw":"---\ntitle: dotnet Dockerfile 部署\nheader_image: https://picgo.ddvlhr.red/picgo/202211260135930.jpeg\ncover: https://picgo.ddvlhr.red/picgo/202211260135930.jpeg\ntags:\n  - dotnet\n  - docker\n---\n## 1.创建 Dockerfile 文件\n``` dockerfile\nFROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base\nCOPY . /publish\nWORKDIR /publish\nEXPOSE 80\n\n# 指定容器运行端口\n# EXPOSE 指定的端口无效, docker 还是会默认使用 80 端口,如果要使用其他端口,请使用如下指令\nENV ASPNETCORE_URLS=http://+:5001\n\n# dotnet-project.dll 为项目编译后的 dll 文件\nENTRYPOINT [\"dotnet\", \"dotnet-project.dll\"]\n```\n## 2.创建 start.sh 文件\n``` shell\n# 容器名称\nAPP=\"api\"\nVERSION=\"v1\"\nIMAGE=$APP:$VERSION\nDOCKER_NAME=\"$APP_$VERSION\"\n# Dockerfile 文件路径\nAPP_DIR=\"/home/apps/csharp/api/publish/Dockerfile\"\n# 项目编译后的 dll 文件路径\nPUBLISH_DIR=\"/home/apps/csharp/api/publish\"\necho \"--- delete container and image ---\"\n# 停止并删除容器和镜像\ndocker stop $DOCKER_NAME\ndocker rm $DOCKER_NAME\ndocker rmi $IMAGE\necho \"+++ build docker images\"\n# 重新构建镜像\ndocker build -t $IMAGE .\necho \"--- run docker images ---\"\n# 启动容器\nCONTAINER_ID=`docker run -dit -p 7229:7229 --name=$DOCKER_NAME --restart=always -v $PUBLISH_DIR:/publish $IMAGE`\n#docker logs -f $CONTAINER_ID\n```\n## 3.部署项目\n> #### 将发布后的文件夹上传到服务器后, 在项目文件夹下执行如下指令即可将项目部署到 docker 中\n``` shell\n$ sh start.sh\n```","slug":"2022-11-25-dotnet-docker","published":1,"date":"2022-11-25T13:32:55.982Z","updated":"2022-11-25T17:39:54.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxekitm00061z670pqu5h9h","content":"<h2 id=\"1-创建-Dockerfile-文件\"><a href=\"#1-创建-Dockerfile-文件\" class=\"headerlink\" title=\"1.创建 Dockerfile 文件\"></a>1.创建 Dockerfile 文件</h2><pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">FROM mcr.microsoft.com&#x2F;dotnet&#x2F;aspnet:6.0 AS base\nCOPY . &#x2F;publish\nWORKDIR &#x2F;publish\nEXPOSE 80\n\n# 指定容器运行端口\n# EXPOSE 指定的端口无效, docker 还是会默认使用 80 端口,如果要使用其他端口,请使用如下指令\nENV ASPNETCORE_URLS&#x3D;http:&#x2F;&#x2F;+:5001\n\n# dotnet-project.dll 为项目编译后的 dll 文件\nENTRYPOINT [&quot;dotnet&quot;, &quot;dotnet-project.dll&quot;]</code></pre>\n<h2 id=\"2-创建-start-sh-文件\"><a href=\"#2-创建-start-sh-文件\" class=\"headerlink\" title=\"2.创建 start.sh 文件\"></a>2.创建 start.sh 文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 容器名称\nAPP&#x3D;&quot;api&quot;\nVERSION&#x3D;&quot;v1&quot;\nIMAGE&#x3D;$APP:$VERSION\nDOCKER_NAME&#x3D;&quot;$APP_$VERSION&quot;\n# Dockerfile 文件路径\nAPP_DIR&#x3D;&quot;&#x2F;home&#x2F;apps&#x2F;csharp&#x2F;api&#x2F;publish&#x2F;Dockerfile&quot;\n# 项目编译后的 dll 文件路径\nPUBLISH_DIR&#x3D;&quot;&#x2F;home&#x2F;apps&#x2F;csharp&#x2F;api&#x2F;publish&quot;\necho &quot;--- delete container and image ---&quot;\n# 停止并删除容器和镜像\ndocker stop $DOCKER_NAME\ndocker rm $DOCKER_NAME\ndocker rmi $IMAGE\necho &quot;+++ build docker images&quot;\n# 重新构建镜像\ndocker build -t $IMAGE .\necho &quot;--- run docker images ---&quot;\n# 启动容器\nCONTAINER_ID&#x3D;&#96;docker run -dit -p 7229:7229 --name&#x3D;$DOCKER_NAME --restart&#x3D;always -v $PUBLISH_DIR:&#x2F;publish $IMAGE&#96;\n#docker logs -f $CONTAINER_ID</code></pre>\n<h2 id=\"3-部署项目\"><a href=\"#3-部署项目\" class=\"headerlink\" title=\"3.部署项目\"></a>3.部署项目</h2><blockquote>\n<h4 id=\"将发布后的文件夹上传到服务器后-在项目文件夹下执行如下指令即可将项目部署到-docker-中\"><a href=\"#将发布后的文件夹上传到服务器后-在项目文件夹下执行如下指令即可将项目部署到-docker-中\" class=\"headerlink\" title=\"将发布后的文件夹上传到服务器后, 在项目文件夹下执行如下指令即可将项目部署到 docker 中\"></a>将发布后的文件夹上传到服务器后, 在项目文件夹下执行如下指令即可将项目部署到 docker 中</h4></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sh start.sh</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-创建-Dockerfile-文件\"><a href=\"#1-创建-Dockerfile-文件\" class=\"headerlink\" title=\"1.创建 Dockerfile 文件\"></a>1.创建 Dockerfile 文件</h2><pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">FROM mcr.microsoft.com&#x2F;dotnet&#x2F;aspnet:6.0 AS base\nCOPY . &#x2F;publish\nWORKDIR &#x2F;publish\nEXPOSE 80\n\n# 指定容器运行端口\n# EXPOSE 指定的端口无效, docker 还是会默认使用 80 端口,如果要使用其他端口,请使用如下指令\nENV ASPNETCORE_URLS&#x3D;http:&#x2F;&#x2F;+:5001\n\n# dotnet-project.dll 为项目编译后的 dll 文件\nENTRYPOINT [&quot;dotnet&quot;, &quot;dotnet-project.dll&quot;]</code></pre>\n<h2 id=\"2-创建-start-sh-文件\"><a href=\"#2-创建-start-sh-文件\" class=\"headerlink\" title=\"2.创建 start.sh 文件\"></a>2.创建 start.sh 文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 容器名称\nAPP&#x3D;&quot;api&quot;\nVERSION&#x3D;&quot;v1&quot;\nIMAGE&#x3D;$APP:$VERSION\nDOCKER_NAME&#x3D;&quot;$APP_$VERSION&quot;\n# Dockerfile 文件路径\nAPP_DIR&#x3D;&quot;&#x2F;home&#x2F;apps&#x2F;csharp&#x2F;api&#x2F;publish&#x2F;Dockerfile&quot;\n# 项目编译后的 dll 文件路径\nPUBLISH_DIR&#x3D;&quot;&#x2F;home&#x2F;apps&#x2F;csharp&#x2F;api&#x2F;publish&quot;\necho &quot;--- delete container and image ---&quot;\n# 停止并删除容器和镜像\ndocker stop $DOCKER_NAME\ndocker rm $DOCKER_NAME\ndocker rmi $IMAGE\necho &quot;+++ build docker images&quot;\n# 重新构建镜像\ndocker build -t $IMAGE .\necho &quot;--- run docker images ---&quot;\n# 启动容器\nCONTAINER_ID&#x3D;&#96;docker run -dit -p 7229:7229 --name&#x3D;$DOCKER_NAME --restart&#x3D;always -v $PUBLISH_DIR:&#x2F;publish $IMAGE&#96;\n#docker logs -f $CONTAINER_ID</code></pre>\n<h2 id=\"3-部署项目\"><a href=\"#3-部署项目\" class=\"headerlink\" title=\"3.部署项目\"></a>3.部署项目</h2><blockquote>\n<h4 id=\"将发布后的文件夹上传到服务器后-在项目文件夹下执行如下指令即可将项目部署到-docker-中\"><a href=\"#将发布后的文件夹上传到服务器后-在项目文件夹下执行如下指令即可将项目部署到-docker-中\" class=\"headerlink\" title=\"将发布后的文件夹上传到服务器后, 在项目文件夹下执行如下指令即可将项目部署到 docker 中\"></a>将发布后的文件夹上传到服务器后, 在项目文件夹下执行如下指令即可将项目部署到 docker 中</h4></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sh start.sh</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"claxekite00011z670doqaoua","tag_id":"claxekitl00041z67c73x1gaw","_id":"claxekitr000a1z676ph76rzc"},{"post_id":"claxekite00011z670doqaoua","tag_id":"claxekito00071z67hvbmeaa8","_id":"claxekitr000b1z67e32p146d"},{"post_id":"claxekite00011z670doqaoua","tag_id":"claxekitp00081z67fr9qbjr5","_id":"claxekitr000d1z67c7qjfb4b"},{"post_id":"claxekiti00031z6778nl8f57","tag_id":"claxekitl00041z67c73x1gaw","_id":"claxekits000g1z67dfw698ht"},{"post_id":"claxekiti00031z6778nl8f57","tag_id":"claxekitr000c1z67bxhi7vj1","_id":"claxekits000h1z67eh392qgs"},{"post_id":"claxekiti00031z6778nl8f57","tag_id":"claxekitr000e1z671tmgbep4","_id":"claxekits000j1z67cdqw3pzc"},{"post_id":"claxekitm00061z670pqu5h9h","tag_id":"claxekitl00041z67c73x1gaw","_id":"claxekits000k1z677oecbng8"},{"post_id":"claxekitm00061z670pqu5h9h","tag_id":"claxekits000i1z673qtqc7ho","_id":"claxekits000l1z67am0a2yr6"}],"Tag":[{"name":"dotnet","_id":"claxekitl00041z67c73x1gaw"},{"name":"entityframework","_id":"claxekito00071z67hvbmeaa8"},{"name":"backend","_id":"claxekitp00081z67fr9qbjr5"},{"name":"dependency-injection","_id":"claxekitr000c1z67bxhi7vj1"},{"name":"C#","_id":"claxekitr000e1z671tmgbep4"},{"name":"docker","_id":"claxekits000i1z673qtqc7ho"}]}}